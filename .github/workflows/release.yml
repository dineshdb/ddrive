name: Release

# This workflow is manually triggered only
on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Bump version
        id: bump
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          VERSION_BUMP="${{ github.event.inputs.version_bump }}"
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump version based on input
          case $VERSION_BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag: $NEW_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          NEW_TAG="${{ steps.bump.outputs.new_tag }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          
          echo "## Changes in $NEW_TAG" > changelog.md
          echo "" >> changelog.md
          
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD >> changelog.md
          else
            # First release
            echo "- Initial release" >> changelog.md
          fi
          
          # Set multiline output
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

  build:
    needs: generate-tag
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ddrive-linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ddrive-linux-x64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: ddrive-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ddrive-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ddrive-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ddrive-windows-x64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: |
          SQLX_OFFLINE=true cargo build --release --target ${{ matrix.target }}
          
      # Tests are run in the CI workflow

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz ddrive
          cd ../../..

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip ddrive.exe
          cd ../../..

      - name: Upload artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}.tar.gz

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}.zip

  release:
    needs: [generate-tag, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.generate-tag.outputs.new_tag }}
          name: Release ${{ needs.generate-tag.outputs.new_tag }}
          body: |
            ${{ needs.generate-tag.outputs.changelog }}
            
            ## Installation
            
            ### Quick Install (Linux/macOS)
            ```bash
            # Download and install the latest release
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.generate-tag.outputs.new_tag }}/ddrive-linux-x64.tar.gz | tar xz
            sudo mv ddrive /usr/local/bin/
            ```
            
            ### Manual Installation
            1. Download the appropriate binary for your platform from the assets below
            2. Extract the archive
            3. Move the `ddrive` binary to a directory in your PATH
            
            ### Verify Installation
            ```bash
            ddrive --version
            ```
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}